#!/bin/bash

# ==========================================
# GitHub-Based SSH Key Vault
# ==========================================
set -e  # Exit on error

# === Configuration ===
GITHUB_USER="pwnmeow"
REPO_NAME="ssh-key-vault"
REPO_URL="git@github.com:$GITHUB_USER/$REPO_NAME.git"
VAULT_DIR="$HOME/.ssh/keyvault"
KEYS_DIR="$VAULT_DIR/keys"
DB_FILE="$VAULT_DIR/keys.db"
CONFIG_FILE="$HOME/.ssh/config"
CRON_JOB="0 * * * * $VAULT_DIR/locksmith.sh sync"


# ==========================================
# Function: List SSH Keys 
# ==========================================
list_keys() {
    echo "üîç Listing stored SSH keys..."
    
    if [[ ! -s "$DB_FILE" ]]; then
        echo "‚ö†Ô∏è No keys found in the vault."
    else
        echo "========================================="
        echo "  üîë Stored SSH Keys in the Vault"
        echo "========================================="
        printf "%-25s %-15s %-15s\n" "Hostname" "Host IP" "Username"
        echo "-----------------------------------------"
        
        while IFS="|" read -r host_ip hostname username key_name || [[ -n "$host_ip" ]]; do
            if [[ -n "$host_ip" && -n "$hostname" && -n "$username" ]]; then
                printf "%-25s %-15s %-15s\n" "$hostname" "$host_ip" "$username"
            fi
        done < "$DB_FILE"
        
        echo "========================================="
    fi

    read -p "üîô Press Enter to return to the main menu..."
}

# ==========================================
# Function: Delete SSH Key 
# ==========================================
delete_key() {
    list_keys  # Show available keys first

    read -p "‚ùå Enter Hostname or IP to delete: " search_key

    temp_file=$(mktemp)
    deleted=false

    cd "$VAULT_DIR"

    while IFS="|" read -r host_ip hostname username key_name || [[ -n "$host_ip" ]]; do
        if [[ "$hostname" == "$search_key" || "$host_ip" == "$search_key" ]]; then
            echo "üóëÔ∏è Deleting key: $key_name"
            git rm -f "$KEYS_DIR/$key_name" "$KEYS_DIR/$key_name.pub" 2>/dev/null || true
            deleted=true
        else
            echo "$host_ip|$hostname|$username|$key_name" >> "$temp_file"
        fi
    done < "$DB_FILE"

    mv "$temp_file" "$DB_FILE"

    if [[ "$deleted" == true ]]; then
        git add "$DB_FILE"
        git commit -m "Deleted SSH key: $search_key"
        git push
        update_ssh_config  # Refresh SSH config after deletion
        echo "‚úÖ Key deleted successfully and removed from GitHub!"
    else
        echo "‚ö†Ô∏è No key found for $search_key."
    fi

    read -p "üîô Press Enter to return to the main menu..."
}



# ==========================================
# Function: Backup Existing SSH Keys
# ==========================================
backup_keys() {
    local backup_file="$HOME/.ssh/backup_$(date +%Y%m%d_%H%M%S).zip"
    echo "üîê Backing up existing SSH keys..."
    zip -r "$backup_file" "$HOME/.ssh" -x "*.zip" "config" "known_hosts"
    echo "‚úÖ Backup saved at: $backup_file"
}

# ==========================================
# Function: Initialize Vault
# ==========================================
initialize_vault() {
    echo "üîß Initializing SSH Key Vault..."
    backup_keys  

    if gh api repos/$GITHUB_USER/$REPO_NAME &>/dev/null; then
        echo "‚ö†Ô∏è Repository already exists on GitHub. Skipping creation."
    else
        echo "‚úÖ Creating new private repository: $REPO_NAME"
        gh repo create "$REPO_NAME" --private
    fi

    echo "üîÑ Verifying GitHub SSH Access..."
    if ! ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
        echo "‚ùå SSH authentication failed. Please check your SSH key and GitHub settings."
        exit 1
    fi
    echo "‚úÖ SSH authentication successful."

    GIT_REMOTE_URL="git@github.com:$GITHUB_USER/$REPO_NAME.git"

    if [ ! -d "$VAULT_DIR/.git" ]; then
        echo "üîÑ Cloning repository into $VAULT_DIR..."
        git clone "$GIT_REMOTE_URL" "$VAULT_DIR"
    else
        echo "‚ö†Ô∏è Local repository already exists."
        cd "$VAULT_DIR"
        git remote set-url origin "$GIT_REMOTE_URL"
        git fetch origin

        if git ls-remote --exit-code origin &>/dev/null; then
            git reset --hard origin/main
            git pull --rebase
        else
            echo "‚ö†Ô∏è Remote repository is empty. Adding an initial commit."
            touch .gitkeep
            git add .gitkeep
            git commit -m "Initial commit to set up repository"
            git push -u origin main
        fi
    fi

    mkdir -p "$KEYS_DIR"

    if [ ! -f "$DB_FILE" ]; then
        touch "$DB_FILE"
    fi

    (crontab -l 2>/dev/null | grep -v "$VAULT_DIR/ssh-key-vault.sh sync"; echo "$CRON_JOB") | crontab -

    echo "‚úÖ Initialization complete!"
}

# ==========================================
# Function: Add New SSH Key 
# ==========================================
add_ssh_key() {
    read -p "üåê Enter Hostname (e.g., example.com): " hostname
    read -p "üñ•Ô∏è Enter Host IP (e.g., 192.168.1.100): " host_ip
    read -p "üë§ Enter Username: " username

    key_name="${hostname}-${host_ip}"
    key_path="$KEYS_DIR/$key_name"

    ssh-keygen -t ed25519 -f "$key_path" -N ""

    echo "$host_ip|$hostname|$username|$key_name" >> "$DB_FILE"

    cd "$VAULT_DIR"
    git add "keys/$key_name"*
    git add "$DB_FILE"
    git commit -m "Added new key: $key_name"
    git push

    update_ssh_config
    echo "‚úÖ Key added and pushed to GitHub!"
}
# ==========================================
# Function: Update SSH Config File from Database
# ==========================================
update_ssh_config() {
    echo "üîÑ Updating SSH Config..."
    cp "$CONFIG_FILE" "$CONFIG_FILE.bak"

    echo "# SSH Config Generated by SSH Key Vault" > "$CONFIG_FILE"

    while IFS="|" read -r host_ip hostname username key_name; do
        if [[ -f "$KEYS_DIR/$key_name" ]]; then
            echo -e "\nHost $hostname\n  HostName $host_ip\n  User $username\n  IdentityFile $KEYS_DIR/$key_name" >> "$CONFIG_FILE"
        fi
    done < "$DB_FILE"

    echo "‚úÖ SSH Config Updated!"
}


# ==========================================
# Function: Sync Local to Remote (GitHub) 
# ==========================================
sync_to_github() {
    echo "üîÑ Syncing local keys and database to GitHub..."
    cd "$VAULT_DIR"

    # Detect and commit unstaged changes before pulling
    if [[ -n $(git status --porcelain) ]]; then
        echo "‚ö†Ô∏è Unstaged changes detected. Staging and committing them..."
        git add -A  # Stage all changes, including deletions
        git commit -m "üîÑ Auto-commit before syncing changes"
    fi

    # Pull latest changes and push local updates
    git pull --rebase
    git push

    echo "‚úÖ Sync completed successfully!"
}

# ==========================================
# Function: Sync Remote to Local (GitHub) & Update SSH Config
# ==========================================
sync_from_github() {
    echo "üîÑ Pulling latest keys and database from GitHub..."
    backup_keys
    cd "$VAULT_DIR"
    git pull --rebase
    mkdir -p "$KEYS_DIR"
    update_ssh_config
    echo "‚úÖ Remote-to-local sync complete!"
}

# ==========================================
# Function: Uninstall (Clean Everything)
# ==========================================
uninstall_vault() {
    echo "‚ö†Ô∏è WARNING: This will remove SSH Key Vault. Are you sure? (y/N)"
    read -r confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        echo "üöÄ Removing SSH Key Vault..."
        rm -rf "$VAULT_DIR"
        crontab -l | grep -v "$VAULT_DIR/ssh-key-vault.sh sync" | crontab -
        echo "‚úÖ Uninstallation complete!"
    else
        echo "‚ùå Uninstallation aborted."
    fi
}

# ==========================================
# Function: Interactive Menu
# ==========================================
show_menu() {
    while true; do
        clear
        echo "========================================"
        echo "   üîê SSH Key Vault Management System   "
        echo "========================================"
        echo "1Ô∏è‚É£  Install Vault"
        echo "2Ô∏è‚É£  Add SSH Key"
        echo "3Ô∏è‚É£  List Stored Keys"
        echo "4Ô∏è‚É£  Delete an SSH Key"
        echo "5Ô∏è‚É£  Sync Local to Remote (GitHub)"
        echo "6Ô∏è‚É£  Sync Remote to Local (GitHub)"
        echo "7Ô∏è‚É£  Update SSH Config"
        echo "8Ô∏è‚É£  Uninstall Vault"
        echo "9Ô∏è‚É£  Exit"
        echo "========================================"
        read -p "Select an option: " option

        case $option in
            1) initialize_vault ;;
            2) add_ssh_key ;;
            3) list_keys ;;
            4) delete_key ;;
            5) sync_to_github ;;
            6) sync_from_github ;;
            7) update_ssh_config ;;
            8) uninstall_vault ;;
            9) exit 0 ;;
            *) echo "‚ùå Invalid option! Try again."; sleep 2 ;;
        esac
    done
}

# ==========================================
# Main Execution (Run Menu by Default)
# ==========================================
show_menu



